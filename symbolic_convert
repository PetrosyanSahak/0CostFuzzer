#include<iostream>
#include<typeinfo>
#include<random>
#include<time.h>


template <typename T>
class Symbolic {
    public:
        Symbolic(void) {
            //srand(time(NULL));
            T value = 5;
            std::cout << "in the constructor" << std::endl;
        }   

        operator T (void) const {
            return value;
        }   
        T value = rand() % 10; 
};
using symbolic_char = Symbolic<char>;
using symbolic_short = Symbolic<short>;
using symbolic_int = Symbolic<int>;
using symbolic_unsigned = Symbolic<unsigned>;
using symbolic_long = Symbolic<long>;

using symbolic_int8_t = Symbolic<int8_t>;
using symbolic_uint8_t = Symbolic<uint8_t>;
using symbolic_int16_t = Symbolic<int16_t>;
using symbolic_uint16_t = Symbolic<uint16_t>;
using symbolic_int32_t = Symbolic<int32_t>;
using symbolic_uint32_t = Symbolic<uint32_t>;
using symbolic_int64_t = Symbolic<int64_t>;
using symbolic_uint64_t = Symbolic<uint64_t>;
int main() {

    srand(time(NULL));
    symbolic_int x;
    std::cout << x.value << std::endl;
    std::cout << x << std::endl;
//    std::cout <<typeid(x.value).name() << std::endl;
    return 0;
}

